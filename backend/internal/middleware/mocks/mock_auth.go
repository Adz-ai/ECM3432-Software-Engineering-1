// Code generated by MockGen. DO NOT EDIT.
// Source: internal/middleware/auth.go
//
// Generated by this command:
//
//	mockgen -source=internal/middleware/auth.go -destination=internal/middleware/mocks/mock_auth.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
	isgomock struct{}
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthMiddleware mocks base method.
func (m *MockAuthenticator) AuthMiddleware() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthMiddleware")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// AuthMiddleware indicates an expected call of AuthMiddleware.
func (mr *MockAuthenticatorMockRecorder) AuthMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthMiddleware", reflect.TypeOf((*MockAuthenticator)(nil).AuthMiddleware))
}

// StaffOnly mocks base method.
func (m *MockAuthenticator) StaffOnly() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffOnly")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// StaffOnly indicates an expected call of StaffOnly.
func (mr *MockAuthenticatorMockRecorder) StaffOnly() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffOnly", reflect.TypeOf((*MockAuthenticator)(nil).StaffOnly))
}
