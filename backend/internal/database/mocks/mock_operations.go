// Code generated by MockGen. DO NOT EDIT.
// Source: internal/database/operations.go
//
// Generated by this command:
//
//	mockgen -source=internal/database/operations.go -destination=internal/database/mocks/mock_operations.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "chalkstone.council/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabaseOperations is a mock of DatabaseOperations interface.
type MockDatabaseOperations struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseOperationsMockRecorder
	isgomock struct{}
}

// MockDatabaseOperationsMockRecorder is the mock recorder for MockDatabaseOperations.
type MockDatabaseOperationsMockRecorder struct {
	mock *MockDatabaseOperations
}

// NewMockDatabaseOperations creates a new mock instance.
func NewMockDatabaseOperations(ctrl *gomock.Controller) *MockDatabaseOperations {
	mock := &MockDatabaseOperations{ctrl: ctrl}
	mock.recorder = &MockDatabaseOperationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseOperations) EXPECT() *MockDatabaseOperationsMockRecorder {
	return m.recorder
}

// CreateIssue mocks base method.
func (m *MockDatabaseOperations) CreateIssue(issue *models.IssueCreate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIssue", issue)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIssue indicates an expected call of CreateIssue.
func (mr *MockDatabaseOperationsMockRecorder) CreateIssue(issue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIssue", reflect.TypeOf((*MockDatabaseOperations)(nil).CreateIssue), issue)
}

// CreateUser mocks base method.
func (m *MockDatabaseOperations) CreateUser(username, passwordHash, userType string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, passwordHash, userType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDatabaseOperationsMockRecorder) CreateUser(username, passwordHash, userType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDatabaseOperations)(nil).CreateUser), username, passwordHash, userType)
}

// GetAverageResolutionTime mocks base method.
func (m *MockDatabaseOperations) GetAverageResolutionTime() (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAverageResolutionTime")
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAverageResolutionTime indicates an expected call of GetAverageResolutionTime.
func (mr *MockDatabaseOperationsMockRecorder) GetAverageResolutionTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAverageResolutionTime", reflect.TypeOf((*MockDatabaseOperations)(nil).GetAverageResolutionTime))
}

// GetEngineerByID mocks base method.
func (m *MockDatabaseOperations) GetEngineerByID(id int64) (*models.Engineer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineerByID", id)
	ret0, _ := ret[0].(*models.Engineer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngineerByID indicates an expected call of GetEngineerByID.
func (mr *MockDatabaseOperationsMockRecorder) GetEngineerByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineerByID", reflect.TypeOf((*MockDatabaseOperations)(nil).GetEngineerByID), id)
}

// GetEngineerPerformance mocks base method.
func (m *MockDatabaseOperations) GetEngineerPerformance() ([]*models.EngineerPerformance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngineerPerformance")
	ret0, _ := ret[0].([]*models.EngineerPerformance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEngineerPerformance indicates an expected call of GetEngineerPerformance.
func (mr *MockDatabaseOperationsMockRecorder) GetEngineerPerformance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngineerPerformance", reflect.TypeOf((*MockDatabaseOperations)(nil).GetEngineerPerformance))
}

// GetIssue mocks base method.
func (m *MockDatabaseOperations) GetIssue(id int64) (*models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssue", id)
	ret0, _ := ret[0].(*models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssue indicates an expected call of GetIssue.
func (mr *MockDatabaseOperationsMockRecorder) GetIssue(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssue", reflect.TypeOf((*MockDatabaseOperations)(nil).GetIssue), id)
}

// GetIssueAnalytics mocks base method.
func (m *MockDatabaseOperations) GetIssueAnalytics(startDate, endDate string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssueAnalytics", startDate, endDate)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssueAnalytics indicates an expected call of GetIssueAnalytics.
func (mr *MockDatabaseOperationsMockRecorder) GetIssueAnalytics(startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssueAnalytics", reflect.TypeOf((*MockDatabaseOperations)(nil).GetIssueAnalytics), startDate, endDate)
}

// GetIssuesForMap mocks base method.
func (m *MockDatabaseOperations) GetIssuesForMap() ([]*models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuesForMap")
	ret0, _ := ret[0].([]*models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIssuesForMap indicates an expected call of GetIssuesForMap.
func (mr *MockDatabaseOperationsMockRecorder) GetIssuesForMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuesForMap", reflect.TypeOf((*MockDatabaseOperations)(nil).GetIssuesForMap))
}

// GetUserByUsername mocks base method.
func (m *MockDatabaseOperations) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockDatabaseOperationsMockRecorder) GetUserByUsername(username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockDatabaseOperations)(nil).GetUserByUsername), username)
}

// ListEngineers mocks base method.
func (m *MockDatabaseOperations) ListEngineers() ([]*models.Engineer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEngineers")
	ret0, _ := ret[0].([]*models.Engineer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEngineers indicates an expected call of ListEngineers.
func (mr *MockDatabaseOperationsMockRecorder) ListEngineers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEngineers", reflect.TypeOf((*MockDatabaseOperations)(nil).ListEngineers))
}

// ListIssues mocks base method.
func (m *MockDatabaseOperations) ListIssues(page, pageSize int) ([]*models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIssues", page, pageSize)
	ret0, _ := ret[0].([]*models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIssues indicates an expected call of ListIssues.
func (mr *MockDatabaseOperationsMockRecorder) ListIssues(page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIssues", reflect.TypeOf((*MockDatabaseOperations)(nil).ListIssues), page, pageSize)
}

// SearchIssues mocks base method.
func (m *MockDatabaseOperations) SearchIssues(issueType, status string) ([]*models.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchIssues", issueType, status)
	ret0, _ := ret[0].([]*models.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchIssues indicates an expected call of SearchIssues.
func (mr *MockDatabaseOperationsMockRecorder) SearchIssues(issueType, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchIssues", reflect.TypeOf((*MockDatabaseOperations)(nil).SearchIssues), issueType, status)
}

// UpdateIssue mocks base method.
func (m *MockDatabaseOperations) UpdateIssue(id int64, update *models.IssueUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIssue", id, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIssue indicates an expected call of UpdateIssue.
func (mr *MockDatabaseOperationsMockRecorder) UpdateIssue(id, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIssue", reflect.TypeOf((*MockDatabaseOperations)(nil).UpdateIssue), id, update)
}
